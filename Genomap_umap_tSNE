import scipy.io as sio
import numpy as np
import matplotlib.pyplot as plt
import umap.umap_ as umap
import scanpy as sc
from sklearn.manifold import TSNE
import anndata as ad
import scanorama
from sklearn.decomposition import PCA
import genomap.genoDR as gp
import genomap.genoMOI as gpm

# Set verbosity level and logging for scanpy
sc.settings.verbosity = 3
sc.logging.print_header()
sc.settings.set_figure_params(dpi=80, facecolor='white')
plt.rcParams['figure.figsize'] = (8, 10)
plt.rcParams['font.size'] = 30
plt.rcParams['font.weight'] = 'bold'

data_folder = 'C:/Users/ariana/Documents/Ariana/DataSets/GenomapDataSet'

# Function to plot embeddings with grid lines removed
def plot_embedding(X, y, title, filename):
    plt.figure(figsize=(8, 10))
    plt.scatter(X[:, 0], X[:, 1], c=y, cmap='jet', marker='o', s=18)
    plt.colorbar(label='Batch Label')
    plt.xlabel(f'{title}1', fontsize=30, fontweight='bold')
    plt.ylabel(f'{title}2', fontsize=30, fontweight='bold')
    plt.title(f'{title}', fontsize=20, fontweight='bold')
    plt.xticks(fontsize=20, fontweight='bold')
    plt.yticks(fontsize=20, fontweight='bold')
    plt.xlim(-15, 15)
    plt.ylim(-15, 15)
    plt.grid(False)
    plt.savefig(f'{filename}.png')
    #plt.show()
def plot_umap_embedding(X, y, title, filename):
    plt.figure(figsize=(8, 10))
    scatter =plt.scatter(X[:, 0], X[:, 1], c=y, cmap='jet', marker='o', s=18)
    plt.colorbar(scatter, label='Batch Label')
    plt.xlabel(f'{title}1', fontsize=30, fontweight='bold')
    plt.ylabel(f'{title}2', fontsize=30, fontweight='bold')
    plt.title(f'{title}', fontsize=30, fontweight='bold')
    plt.xticks(fontsize=30, fontweight='bold')
    plt.yticks(fontsize=30, fontweight='bold')
    plt.xlim(-5, 20)
    plt.ylim(-10, 20)
    plt.grid(False)
    plt.savefig(f'{data_folder}/{filename}.png')
    #plt.tight_layout()
    #plt.show()



# Load five different pancreatic datasets
dx = sio.loadmat(f'{data_folder}/dataBaronX.mat')
data1=dx['dataBaron']
dx = sio.loadmat(f'{data_folder}/dataMuraroX.mat')
data2=dx['dataMuraro']
dx = sio.loadmat(f'{data_folder}/dataScapleX.mat')
data3=dx['dataScaple']
dx = sio.loadmat(f'{data_folder}/dataWangX.mat')
data4=dx['dataWang']
dx = sio.loadmat(f'{data_folder}/dataXinX.mat')
data5=dx['dataXin']

# Load class and batch labels
dx = sio.loadmat(f'{data_folder}/classLabel.mat')
y = np.squeeze(dx['classLabel'])
dx = sio.loadmat(f'{data_folder}/batchLabel.mat')
ybatch = np.squeeze(dx['batchLabel'])

n_clusters = len(np.unique(ybatch))

#data = genoCombine(data1, data2, data3, data4, data5, colNum=33, rowNum=33)
adata1 = ad.AnnData(data1)
adata2 = ad.AnnData(data2)
adata3 = ad.AnnData(data3)
adata4 = ad.AnnData(data4)
adata5 = ad.AnnData(data5)

# The user inputs are the number of neighbors and number of HVGs
no_neighbor = 5
n_hvgs = 1000

# Perform Scanorama correction
adatas = [adata1, adata2, adata3, adata4, adata5]
adatas_cor = scanorama.correct_scanpy(adatas, return_dimred=True, knn=no_neighbor, hvg=n_hvgs)
merged_adata = ad.concat(adatas_cor, join='outer', label="batch")

# type(merged_adata)
merged_adata

# Extract the corrected data from merged_adata
merged_data = merged_adata.X
merged_adata

reduced_dim=32 # Number of reduced dimension

# Convert the sparse matrix to a dense matrix
merged_data_dense = merged_data.toarray()

resDR=gp.genoDR(merged_data_dense, n_dim=reduced_dim, n_clusters=n_clusters, colNum=33,rowNum=33) 

# Apply dimensionality reduction (UMAP and t-SNE)
umap_reducer = umap.UMAP(n_neighbors=5, min_dist=0.3, n_epochs=200)
embedding2D_UMAP = umap_reducer.fit_transform(resDR)
plot_umap_embedding(embedding2D_UMAP, y, "UMAP", "Genomap_UMAP_plot_with_Genomap_DataSet")

tsne_reducer = TSNE(n_components=2, perplexity=30, n_iter=300)
embedding2D_TSNE = tsne_reducer.fit_transform(resDR)
plot_embedding(embedding2D_TSNE, y, "t-SNE", "Genomap_TSNE_plot_with_Genomap_DataSet")
