import numpy as np
import os
import matplotlib.pyplot as plt
from sklearn.impute import SimpleImputer
from sklearn.manifold import TSNE
import umap.umap_ as umap
import anndata as ad
import scipy.io as sio
import scanpy as sc
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import NMF

data_folder = 'C:/Users/miz_r/Documents/Ariana/StanfordIntern/DataSets/GenomapDataSet'

# Scanpy settings
sc.settings.verbosity = 3
sc.logging.print_header()
sc.settings.set_figure_params(dpi=80, facecolor='white')

# Matplotlib settings
plt.rcParams['figure.figsize'] = (8, 10)
plt.rcParams['font.size'] = 30
plt.rcParams['font.weight'] = 'bold'

# Load five different pancreatic datasets
dx = sio.loadmat(f'{data_folder}/dataBaronX.mat')
data1=dx['dataBaron']
dx = sio.loadmat(f'{data_folder}/dataMuraroX.mat')
data2=dx['dataMuraro']
dx = sio.loadmat(f'{data_folder}/dataScapleX.mat')
data3=dx['dataScaple']
dx = sio.loadmat(f'{data_folder}/dataWangX.mat')
data4=dx['dataWang']
dx = sio.loadmat(f'{data_folder}/dataXinX.mat')
data5=dx['dataXin']

# Combine the datasets into a list
data_list = [data1, data2, data3, data4, data5]

# Load class and batch labels
dx = sio.loadmat(f'{data_folder}/classLabel.mat')
y = np.squeeze(dx['classLabel'])
dx = sio.loadmat(f'{data_folder}/batchLabel.mat')
ybatch = np.squeeze(dx['batchLabel'])

# The user inputs are the number of neighbors and number of HVGs
no_neighbor = 5
n_hvgs = 1000
# Ensure y and ybatch lengths match the total data length
assert len(y) == sum([data.shape[0] for data in data_list])
assert len(ybatch) == sum([data.shape[0] for data in data_list])

# Normalize each dataset
scaler = StandardScaler()
normalized_data = [scaler.fit_transform(data) for data in data_list]

# Concatenate datasets
all_data = np.vstack(normalized_data)

# Shift data to make all values non-negative
min_value = all_data.min()
all_data_shifted = all_data - min_value


# Apply iNMF
n_components = 10  # Adjust as needed
nmf = NMF(n_components=n_components)
W = nmf.fit_transform(all_data_shifted)
W = W.reshape(W.shape[0],-1)
# Visualize with UMAP
reducer = umap.UMAP()
embedding = reducer.fit_transform(W)


# Function to plot embeddings
def plot_embedding(X, y, title, filename):
    plt.figure(figsize=(8, 10))
    plt.scatter(X[:, 0], X[:, 1], c=y, cmap='jet', marker='o', s=18)
    plt.colorbar(label='Batch Label')
    plt.xlabel(f'{title}1', fontsize=30, fontweight='bold')
    plt.ylabel(f'{title}2', fontsize=30, fontweight='bold')
    plt.title(f'{title}', fontsize=20, fontweight='bold')
    plt.xticks(fontsize=20, fontweight='bold')
    plt.yticks(fontsize=20, fontweight='bold')
    plt.grid(False)
    plt.savefig(f'{data_folder}/{filename}.png')

# Plot UMAP and t-SNE projections
embedding2D_UMAP = umap.UMAP(n_neighbors=30, min_dist=0.3, n_epochs=200).fit_transform(W)
plot_embedding(embedding2D_UMAP, y, "UMAP", "INMF_UMAP_plot_with_Genomap_DataSet")

embedding2D_TSNE = TSNE(n_components=2, perplexity=30, n_iter=300).fit_transform(W)
plot_embedding(embedding2D_TSNE, y, "t-SNE", "INMF_TSNE_plot_with_Genomap_DataSet")
neighborNum = 5
# UMAP Visualization
umap_reducer = umap.UMAP(n_neighbors=neighborNum, min_dist=0.3, n_epochs=200)
embedding2D_UMAP = umap_reducer.fit_transform(W)
plot_embedding(embedding2D_UMAP, y, "UMAP", "INMF_UMAP_plot_2_with_Genomap_DataSet")

# t-SNE Visualization
tsne_reducer = TSNE(n_components=2, perplexity=neighborNum, n_iter=300)
embedding2D_TSNE = tsne_reducer.fit_transform(W)
plot_embedding(embedding2D_TSNE, y, "t-SNE", "INMF_TSNE_plot_2_with_Genomap_DataSet")
